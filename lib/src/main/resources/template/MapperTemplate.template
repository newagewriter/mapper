package ${classPackage}.mapper

import io.github.newagewriter.processor.converter.MapperConverter
import io.github.newagewriter.processor.mapper.AbstractMapper
import ${classPackage}.${className}

/**
 * ${className}Mapper is auto generated class. Do not change this file.
 * All changes made in this class will be remove after rebuild
 */
class ${className}Mapper(clazz : Class<${className}>) : AbstractMapper<${className}>(clazz) {
    @Deprecated("This constructor is deprecated since 0.4.0 and it will be removed in 0.5.0 version. Use constructor with class parameter instead.", ReplaceWith("${className}Mapper(${className}::class.java)"))
    constructor(obj: ${className}?, objMap: Map<String, Any?>?) : this(${className}::class.java) {
        this.obj = obj
        this.objMap = objMap
    }

    @Deprecated("This constructor is deprecated since 0.4.0 and it will be removed in 0.5.0 version. Use constructor with class parameter instead.", ReplaceWith("${className}Mapper(${className}::class.java)"))
    constructor(obj: ${className}?) : this(obj, null)

    public override fun toMap(obj: ${className}): Map<String, Any?> {
        val result = mapOf<String, Any?>(
        @foreach($fields as key -> value, separator=","):
            "$key" to getValue(obj.$value)
        @end
        )
        return result
    }

    public override fun mapToModel(map: Map<String, Any?>): ${className} {
        val convertedMap = mutableMapOf<String, Any?>()
        @foreach($map as key -> value):
        "$key".split(":").let { parts ->
            if (map.contains(parts[0])) {
                convertedMap[parts[1]] = $value
            }
        }
        @end
        return createFromMap(convertedMap, ${className}::class)
    }
}