package ${classPackage}.mapper

import io.github.newagewriter.processor.converter.MapperConverter
import io.github.newagewriter.processor.mapper.AbstractMapper
import ${classPackage}.${className}

/**
 * ${className}Mapper is auto generated class. Do not change this file.
 * All changes made in this class will be remove after rebuild
 */
class ${className}Mapper(mappedObject : ${className}?, map: Map<String, Any?>? = null) : AbstractMapper<${className}>(mappedObject, map) {
    constructor(objMap: Map<String, Any?>) : this(null, objMap)

    public override fun toMap(): Map<String, Any?> {
        return obj?.let { o ->
            val result = mapOf<String, Any?>(
            @foreach($fields, separator=","):
                "$element" to getValue(o.$element)
            @end
            )
            result
        } ?: throw NullPointerException("Cannot convert object toMap for null value")
    }

    public override fun createMappedObj(): ${className} {
        return  objMap?.let { map ->
            val convertedMap = mutableMapOf<String, Any?>()
            @foreach($map as key -> value):
            if (map.contains("$key")) {
                convertedMap["$key"] = $value
            }
            @end
            createFromMap(convertedMap, ${className}::class)
        } ?: throw NullPointerException("Map is null, cannot create object")
    }
}