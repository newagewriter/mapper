name: GitHub release Actions V1
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on:
  push:
    tags:
      - '*'
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "üñ•Ô∏è The workflow is now ready to test your code on the runner."
#      - name: Git Sumbodule Update
#        run: |
#          git submodule update --init --recursive
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}
#      - name: root folder info
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          distribution: 'zulu'
          java-version: 11
      - name: echo "Build project &#xf121; and publish"
        uses: gradle/gradle-build-action@v2
      - run: ./gradlew clean assemble
      - run: echo "üçè This job's status is ${{ job.status }}."
      - run: echo "üçè check tag lib-${{ github.ref_name }}.jar"
      - name: Prepare release note
        run: |
          sudo chmod +x scripts/get_release_note.sh
          scripts/get_release_note.sh
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body_path: ./tmp_release_note.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') }}
      - name: upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./lib/build/libs/lib-${{ github.ref_name }}.jar
          asset_name: lib-${{ github.ref_name }}.jar
          asset_content_type: application/java-archive
      - id: install-secret-key
        name: Install gpg secret key
        run: |
          sudo apt-get install ca-certificates
          # Install gpg secret key
          cat <(echo -e "${{ secrets.JRELEASER_GPG_SECRET_KEY }}") | base64 --decode | gpg --batch --no-tty --import
          # Verify gpg secret key
          gpg --list-secret-keys --keyid-format LONG
          # mutt GPG tty setting
          export GPG_TTY=$(tty)
          echo "export GPG_TTY=\$(tty)" >> ~/.bash_profile
          echo use-agent >> ~/.gnupg/gpg.conf
          echo pinentry-mode loopback >> ~/.gnupg/gpg.conf
          echo allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf
      - name: Publish package
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: publish -Psigning.gnupg.passphrase=${{ secrets.JRELEASER_GPG_PASSPHRASE }} -Psigning.gnupg.keyName=${{ secrets.JREALEASE_KEY_NAME }}
        env:
          JRELEASER_NEXUS2_USERNAME: ${{ secrets.JRELEASER_NEXUS2_USERNAME }}
          JRELEASER_NEXUS2_PASSWORD: ${{ secrets.JRELEASER_NEXUS2_PASSWORD }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}